// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: proto/template.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CriticalService_AreYouTheLeader_FullMethodName = "/proto.CriticalService/AreYouTheLeader"
	CriticalService_MakeBid_FullMethodName         = "/proto.CriticalService/MakeBid"
	CriticalService_GetResult_FullMethodName       = "/proto.CriticalService/getResult"
	CriticalService_LeaderWrite_FullMethodName     = "/proto.CriticalService/leaderWrite"
	CriticalService_GetnodeType_FullMethodName     = "/proto.CriticalService/getnodeType"
)

// CriticalServiceClient is the client API for CriticalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CriticalServiceClient interface {
	AreYouTheLeader(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	MakeBid(ctx context.Context, in *Bid, opts ...grpc.CallOption) (*Ack, error)
	GetResult(ctx context.Context, in *AskForResult, opts ...grpc.CallOption) (*Result, error)
	LeaderWrite(ctx context.Context, in *Bid, opts ...grpc.CallOption) (*Ack, error)
	GetnodeType(ctx context.Context, in *Ack, opts ...grpc.CallOption) (*NodeType, error)
}

type criticalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCriticalServiceClient(cc grpc.ClientConnInterface) CriticalServiceClient {
	return &criticalServiceClient{cc}
}

func (c *criticalServiceClient) AreYouTheLeader(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, CriticalService_AreYouTheLeader_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *criticalServiceClient) MakeBid(ctx context.Context, in *Bid, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, CriticalService_MakeBid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *criticalServiceClient) GetResult(ctx context.Context, in *AskForResult, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, CriticalService_GetResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *criticalServiceClient) LeaderWrite(ctx context.Context, in *Bid, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, CriticalService_LeaderWrite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *criticalServiceClient) GetnodeType(ctx context.Context, in *Ack, opts ...grpc.CallOption) (*NodeType, error) {
	out := new(NodeType)
	err := c.cc.Invoke(ctx, CriticalService_GetnodeType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CriticalServiceServer is the server API for CriticalService service.
// All implementations must embed UnimplementedCriticalServiceServer
// for forward compatibility
type CriticalServiceServer interface {
	AreYouTheLeader(context.Context, *Request) (*Reply, error)
	MakeBid(context.Context, *Bid) (*Ack, error)
	GetResult(context.Context, *AskForResult) (*Result, error)
	LeaderWrite(context.Context, *Bid) (*Ack, error)
	GetnodeType(context.Context, *Ack) (*NodeType, error)
	mustEmbedUnimplementedCriticalServiceServer()
}

// UnimplementedCriticalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCriticalServiceServer struct {
}

func (UnimplementedCriticalServiceServer) AreYouTheLeader(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreYouTheLeader not implemented")
}
func (UnimplementedCriticalServiceServer) MakeBid(context.Context, *Bid) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeBid not implemented")
}
func (UnimplementedCriticalServiceServer) GetResult(context.Context, *AskForResult) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResult not implemented")
}
func (UnimplementedCriticalServiceServer) LeaderWrite(context.Context, *Bid) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaderWrite not implemented")
}
func (UnimplementedCriticalServiceServer) GetnodeType(context.Context, *Ack) (*NodeType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetnodeType not implemented")
}
func (UnimplementedCriticalServiceServer) mustEmbedUnimplementedCriticalServiceServer() {}

// UnsafeCriticalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CriticalServiceServer will
// result in compilation errors.
type UnsafeCriticalServiceServer interface {
	mustEmbedUnimplementedCriticalServiceServer()
}

func RegisterCriticalServiceServer(s grpc.ServiceRegistrar, srv CriticalServiceServer) {
	s.RegisterService(&CriticalService_ServiceDesc, srv)
}

func _CriticalService_AreYouTheLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CriticalServiceServer).AreYouTheLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CriticalService_AreYouTheLeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CriticalServiceServer).AreYouTheLeader(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CriticalService_MakeBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CriticalServiceServer).MakeBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CriticalService_MakeBid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CriticalServiceServer).MakeBid(ctx, req.(*Bid))
	}
	return interceptor(ctx, in, info, handler)
}

func _CriticalService_GetResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskForResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CriticalServiceServer).GetResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CriticalService_GetResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CriticalServiceServer).GetResult(ctx, req.(*AskForResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _CriticalService_LeaderWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CriticalServiceServer).LeaderWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CriticalService_LeaderWrite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CriticalServiceServer).LeaderWrite(ctx, req.(*Bid))
	}
	return interceptor(ctx, in, info, handler)
}

func _CriticalService_GetnodeType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ack)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CriticalServiceServer).GetnodeType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CriticalService_GetnodeType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CriticalServiceServer).GetnodeType(ctx, req.(*Ack))
	}
	return interceptor(ctx, in, info, handler)
}

// CriticalService_ServiceDesc is the grpc.ServiceDesc for CriticalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CriticalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CriticalService",
	HandlerType: (*CriticalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AreYouTheLeader",
			Handler:    _CriticalService_AreYouTheLeader_Handler,
		},
		{
			MethodName: "MakeBid",
			Handler:    _CriticalService_MakeBid_Handler,
		},
		{
			MethodName: "getResult",
			Handler:    _CriticalService_GetResult_Handler,
		},
		{
			MethodName: "leaderWrite",
			Handler:    _CriticalService_LeaderWrite_Handler,
		},
		{
			MethodName: "getnodeType",
			Handler:    _CriticalService_GetnodeType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/template.proto",
}
